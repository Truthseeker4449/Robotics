#pragma config(Sensor, in1,    jumperRedLeft,  sensorPotentiometer)
#pragma config(Sensor, in2,    jumperRedRight, sensorPotentiometer)
#pragma config(Sensor, in3,    jumperBlueLeft, sensorPotentiometer)
#pragma config(Sensor, in4,    jumperBlueRight, sensorPotentiometer)
#pragma config(Sensor, dgtl1,  redLeft,        sensorLEDtoVCC)
#pragma config(Sensor, dgtl2,  redRight,       sensorLEDtoVCC)
#pragma config(Sensor, dgtl3,  blueLeft,       sensorLEDtoVCC)
#pragma config(Sensor, dgtl4,  blueRight,      sensorLEDtoVCC)
#pragma config(Sensor, dgtl5,  RREncoder,      sensorQuadEncoder)
#pragma config(Sensor, dgtl7,  RFEncoder,      sensorQuadEncoder)
#pragma config(Sensor, dgtl9,  LREncoder,      sensorQuadEncoder)
#pragma config(Sensor, dgtl11, LFEncoder,      sensorQuadEncoder)
#pragma config(Motor,  port1,           driveRightFront, tmotorVex393, openLoop, reversed, encoder, encoderPort, dgtl7, 1000)
#pragma config(Motor,  port2,           driveRightRear, tmotorVex393, openLoop, reversed, encoder, encoderPort, dgtl5, 1000)
#pragma config(Motor,  port4,           wrist,         tmotorVex393, openLoop)
#pragma config(Motor,  port5,           liftRight,     tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port6,           liftLeft,      tmotorVex393, openLoop)
#pragma config(Motor,  port7,           extender,      tmotorVex393, openLoop)
#pragma config(Motor,  port8,           claw,          tmotorVex393, openLoop)
#pragma config(Motor,  port9,           driveLeftRear, tmotorVex393, openLoop, encoder, encoderPort, dgtl9, 1000)
#pragma config(Motor,  port10,          driveLeftFront, tmotorVex393, openLoop, encoder, encoderPort, dgtl11, 1000)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/**
*  Author: Andrew Pugh (Truthseeker4449)
*  Written May 19th, 2014
*/

task main()
{
	while(true)
	{
		motor[driveRightFront] = vexRT[Ch2];
		motor[driveRightRear] = vexRT[Ch2];

		motor[driveLeftFront] = vexRT[Ch3];
		motor[driveLeftRear] = vexRT[Ch3];

		motor[liftLeft] = (vexRT[Btn8R] * 127) - (vexRT[Btn8D] * 127);
	  motor[liftRight] = (vexRT[Btn8R] * 127) - (vexRT[Btn8D] * 127);

	  motor[claw] = (vexRT[Btn7D] * 127) - (vexRT[Btn7U] * 127);
	  motor[wrist] = (vexRT[Btn8U] * 127) - (vexRT[Btn8L] * 127);
	  motor[extender] = (vexRT[Btn6D] * 127) - (vexRT[Btn6U] * 127);
	}
}
